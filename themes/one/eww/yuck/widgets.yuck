;; widgets

(defwidget launcher []
  (box
    :class "launcher_module"
    :orientation "h"
    (button
      :onclick "~/.config/hypr/scripts/exec_rofi"
      (image
        :class "launcher-icon"
        ;:path "assets/blossom.png"
        :path  "images/arch.png"
      :image-width 28))
  ))

(defwidget workspaces []
  (literal
    :content workspace
  :valign "center"))

(defwidget appnames []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
    :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (literal
      :content appname)
      (revealer
        :transition "slideright"
        :reveal control_reveal
        :duration "350ms"
        (box
          :vexpand "false"
          :hexpand "false"
          :orientation "h"
          :space-evenly "true"
          (button
            :class "app-button"
          :onclick "hyprctl dispatch togglefloating 1" "󰄶")
          (button
            :class "app-button"
          :onclick "hyprctl dispatch fullscreen 1" "")
          (button ; use "eventbox" with : ":cursor pointer" for poiner cursor
            :class "app-button color-var3"
            :cursor "pointer"
          :onclick "hyprctl dispatch killactive 1" ""))))))

(defwidget bright []
  (eventbox
    :onhover "${EWW_CMD} update br_reveal=true"
    :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
      (revealer
        :transition "slideright"
        :reveal br_reveal
        :duration "350ms"
        (scale    :class "brightbar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
        :onchange "light -S {}" ))
      (label
        :text "󱄐"
        :class "bright_icon"
      :tooltip "brightness"))))

(defwidget volume []
  (eventbox
    :onhover "${EWW_CMD} update vol_reveal=true"
    :onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
      :class "module-2"
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
      (revealer
        :transition "slideright"
        :reveal vol_reveal
        :duration "350ms"
        (scale
          :class "volbar"
          :value volume_percent
          :orientation "h"
          :tooltip "${volume_percent}%"
          :max 100
          :min 0
        ;:onchange "amixer -D pulse sset Master {}%" ))
        :onchange "pamixer --set-volume {}" ))
      (button
        :onclick "scripts/pop audio_ctl"
        :class "volume_icon"
      "󰋋"))))

(defwidget wifi []
  (eventbox
    :onhover "${EWW_CMD} update wifi_rev=true"
    :onhoverlost "${EWW_CMD} update wifi_rev=false"
    (box
      :vexpand "false"
      :hexpand "false"
      :space-evenly "false"
      (revealer
        :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
        (label
          :class "module_essid"
          :text ESSID_WLAN
        ))
      (button
        :class "module-wif"
        :onclick "~/.config/hypr/scripts/exec_wofi wifi"
      WLAN_ICON))))


(defwidget bat []
  (eventbox
    :cursor "pointer"
    (box
      :class "bat_module"
      :vexpand "false"
      :hexpand "false"
      (circular-progress
        :value {EWW_BATTERY["BAT0"].capacity}
        :class "batbar"
        :thickness 5
        (button
          :onclick "scripts/pop system"
          :class "iconbat"
          :tooltip "battery on ${EWW_BATTERY["BAT0"].capacity}%"
        "󱧥"))
      ))
  )

(defwidget mem []
  (eventbox
    :cursor "pointer"
    (box
      :class "mem_module"
      :vexpand "false"
      :hexpand "false"
      (circular-progress
        :value {EWW_RAM.used_mem_perc}
        :class "membar"
        :thickness 4
        (button
          :onclick "scripts/pop system"
          :class "iconmem"
          :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
          :show_truncated false
          :wrap false
        "󰍛"))))
  )

(defwidget clock_module []
  (eventbox
    :onhover "${EWW_CMD} update time_rev=false" ;; set true to use the onhover function
    :onhoverlost "${EWW_CMD} update time_rev=false"
    :cursor "pointer"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "0"
      (label
        :text clock_time
      :class "clock_time_class" )
      ;;Button added to display the date together the time 
      (button
          :class "clock_date_class"
        :onclick "scripts/pop calendar" clock_date)
      ;;
      (revealer :transition "slideleft"
        :reveal time_rev
        :duration "350ms"
        (button
          :class "clock_date_class"
        :onclick "scripts/pop calendar" clock_date)))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
      :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
      :text "󰍩"))))

(defwidget sep []
  (box
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    :valign "center"
    (label
      :class "separ"
      :valign "center"
      :text "|"
    )))

(defwidget sep2 []
  (box
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    :valign "center"
    (label
      :class "separ"
      :valign "center"
      :text " "
    )))

(defwidget gap []
  (box
    :orientation "h"
    :hexpand "false"
    :visible "true"
  :width "150"))

(defwidget label-mem []
  (box :class "label-mem" 
       :orientation "h"
    (label
    :text " ${round(EWW_RAM.used_mem_perc, 0)} %")
    ))

(defwidget label-bat []
  (box :class "label-bat" 
       :orientation "h"
    (label
        :text "${EWW_BATTERY["BAT0"].capacity}%"
    )))


;;define box of widgets
(defwidget box-right1 []
 (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "box-right1"
    (bright)
    (volume)
    (wifi)
  )
)
(defwidget box-right2 []
 (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "box-right2"
    (bat)
    (label-bat)
    (mem)
    (label-mem)

  )
)
(defwidget box-left-launcher []
 (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "box-left-launcher"
    (launcher)
  )
)
(defwidget box-left []
 (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "box-left"
    (workspaces)
  )
)
(defwidget box-center []
 (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "box-center"
    (clock_module)
  )
)
;;define widget groups
(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "left_modules"
    ;; (box-left-launcher)
    ;;
    (launcher)
    (sep)
    ;; (box-left)
    ;;
    (workspaces)
  ))
(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "center_modules"
    ;(appnames)
    ;; (box-center)
    ;;
    (clock_module)
    ))
(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    ;; (box-right1)
    ;;
    (bright)
    (volume)
    (wifi)
    ;;
    (sep)
    ;; (box-right2)
    ;;
    (bat)
    (label-bat)
    (mem)
    (label-mem)
    (sep2)
    ;(notif_button)
  ))

(defwidget bar_layout []
  (centerbox
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
  ))
